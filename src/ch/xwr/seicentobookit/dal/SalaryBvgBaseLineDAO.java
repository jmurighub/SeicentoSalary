
package ch.xwr.seicentobookit.dal;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.xdev.dal.JPADAO;

import ch.xwr.seicentobookit.entities.SalaryBvgBase;
import ch.xwr.seicentobookit.entities.SalaryBvgBaseLine;
import ch.xwr.seicentobookit.entities.SalaryBvgBaseLine_;

/**
 * Home object for domain model class SalaryBvgBase.
 * 
 * @see SalaryBvgBase
 */
public class SalaryBvgBaseLineDAO extends JPADAO<SalaryBvgBaseLine, Long> {
	public SalaryBvgBaseLineDAO() {
		super(SalaryBvgBaseLine.class);
	}
	
	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<SalaryBvgBaseLine> findByHeader(final SalaryBvgBase dao) {
		final EntityManager entityManager = em();
	
		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		final ParameterExpression<SalaryBvgBase> daoParameter = criteriaBuilder.parameter(SalaryBvgBase.class, "dao");
	
		final CriteriaQuery<SalaryBvgBaseLine> criteriaQuery = criteriaBuilder.createQuery(SalaryBvgBaseLine.class);
	
		final Root<SalaryBvgBaseLine> root = criteriaQuery.from(SalaryBvgBaseLine.class);
	
		criteriaQuery.where(criteriaBuilder.equal(root.get(SalaryBvgBaseLine_.salaryBvgBasis), daoParameter));
	
		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(SalaryBvgBaseLine_.sbxValidFrom)),
				criteriaBuilder.asc(root.get(SalaryBvgBaseLine_.sbxAgeStartYear)));
	
		final TypedQuery<SalaryBvgBaseLine> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(daoParameter, dao);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<SalaryBvgBaseLine> findByHeaderAndDate(final SalaryBvgBase dao, final Date salaryDate, final int ageYear) {
		final EntityManager entityManager = em();
	
		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		final ParameterExpression<SalaryBvgBase> daoParameter = criteriaBuilder.parameter(SalaryBvgBase.class, "dao");
		final ParameterExpression<Date> salaryDateParameter = criteriaBuilder.parameter(Date.class, "salaryDate");
		final ParameterExpression<Integer> ageYearParameter = criteriaBuilder.parameter(Integer.class, "ageYear");
	
		final CriteriaQuery<SalaryBvgBaseLine> criteriaQuery = criteriaBuilder.createQuery(SalaryBvgBaseLine.class);
	
		final Root<SalaryBvgBaseLine> root = criteriaQuery.from(SalaryBvgBaseLine.class);
	
		criteriaQuery.where(criteriaBuilder.and(
				criteriaBuilder.and(criteriaBuilder.equal(root.get(SalaryBvgBaseLine_.salaryBvgBasis), daoParameter),
						criteriaBuilder.lessThanOrEqualTo(root.get(SalaryBvgBaseLine_.sbxValidFrom), salaryDateParameter)),
				criteriaBuilder.le(root.get(SalaryBvgBaseLine_.sbxAgeStartYear), ageYearParameter)));
	
		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(SalaryBvgBaseLine_.sbxValidFrom)),
				criteriaBuilder.desc(root.get(SalaryBvgBaseLine_.sbxAgeStartYear)));
	
		final TypedQuery<SalaryBvgBaseLine> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(daoParameter, dao);
		query.setParameter(salaryDateParameter, salaryDate);
		query.setParameter(ageYearParameter, ageYear);
		return query.getResultList();
	}
	
}