
package ch.xwr.seicentobookit.dal;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.xdev.dal.JPADAO;

import ch.xwr.seicentobookit.entities.Employee;
import ch.xwr.seicentobookit.entities.Salary;
import ch.xwr.seicentobookit.entities.Salary_;

/**
 * Home object for domain model class Salary.
 * 
 * @see Salary
 */
public class SalaryDAO extends JPADAO<Salary, Long> {
	public SalaryDAO() {
		super(Salary.class);
	}
	
	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Salary> getEmployeeSalaries(Employee emp, int year, Date sDate) {
		EntityManager entityManager = em();
	
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		ParameterExpression<Employee> empParameter = criteriaBuilder.parameter(Employee.class, "emp");
		ParameterExpression<Integer> yearParameter = criteriaBuilder.parameter(Integer.class, "year");
		ParameterExpression<Date> sDateParameter = criteriaBuilder.parameter(Date.class, "sDate");
	
		CriteriaQuery<Salary> criteriaQuery = criteriaBuilder.createQuery(Salary.class);
	
		Root<Salary> root = criteriaQuery.from(Salary.class);
	
		criteriaQuery.where(criteriaBuilder.and(
				criteriaBuilder.and(criteriaBuilder.equal(root.get(Salary_.slrYear), yearParameter),
						criteriaBuilder.lessThan(root.get(Salary_.slrDate), sDateParameter)),
				criteriaBuilder.equal(root.get(Salary_.employee), empParameter)));
	
		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Salary_.slrDate)));
	
		TypedQuery<Salary> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(empParameter, emp);
		query.setParameter(yearParameter, year);
		query.setParameter(sDateParameter, sDate);
		return query.getResultList();
	}
	

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Salary> findByBookingDate(Date boDate) {
		EntityManager entityManager = em();
	
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		ParameterExpression<Date> boDateParameter = criteriaBuilder.parameter(Date.class, "boDate");
	
		CriteriaQuery<Salary> criteriaQuery = criteriaBuilder.createQuery(Salary.class);
	
		Root<Salary> root = criteriaQuery.from(Salary.class);
	
		criteriaQuery.where(criteriaBuilder.equal(root.get(Salary_.slrPayDate), boDateParameter));
	
		TypedQuery<Salary> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(boDateParameter, boDate);
		return query.getResultList();
	}
	
}