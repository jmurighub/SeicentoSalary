
package ch.xwr.seicentobookit.dal;

import com.xdev.dal.JPADAO;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;
import ch.xwr.seicentobookit.entities.SalaryCalculation;
import ch.xwr.seicentobookit.entities.SalaryCalculationLine;
import ch.xwr.seicentobookit.entities.SalaryCalculationLine_;

/**
 * Home object for domain model class SalaryCalculation.
 * 
 * @see SalaryCalculation
 */
public class SalaryCalculationLineDAO extends JPADAO<SalaryCalculationLine, Long> {
	public SalaryCalculationLineDAO() {
		super(SalaryCalculationLine.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<SalaryCalculationLine> findByHeader(final SalaryCalculation dao) {
		final EntityManager entityManager = em();
	
		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		final ParameterExpression<SalaryCalculation> daoParameter = criteriaBuilder.parameter(SalaryCalculation.class,
				"dao");
	
		final CriteriaQuery<SalaryCalculationLine> criteriaQuery = criteriaBuilder.createQuery(SalaryCalculationLine.class);
	
		final Root<SalaryCalculationLine> root = criteriaQuery.from(SalaryCalculationLine.class);
	
		criteriaQuery.where(criteriaBuilder.equal(root.get(SalaryCalculationLine_.salaryCalculation), daoParameter));
	
		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(SalaryCalculationLine_.slxValidFrom)));
	
		final TypedQuery<SalaryCalculationLine> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(daoParameter, dao);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<SalaryCalculationLine> findByHeaderAndDate(final SalaryCalculation dao, final Date salaryDate) {
		final EntityManager entityManager = em();
	
		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		final ParameterExpression<SalaryCalculation> daoParameter = criteriaBuilder.parameter(SalaryCalculation.class,
				"dao");
		final ParameterExpression<Date> salaryDateParameter = criteriaBuilder.parameter(Date.class, "salaryDate");
	
		final CriteriaQuery<SalaryCalculationLine> criteriaQuery = criteriaBuilder.createQuery(SalaryCalculationLine.class);
	
		final Root<SalaryCalculationLine> root = criteriaQuery.from(SalaryCalculationLine.class);
	
		criteriaQuery.where(criteriaBuilder.and(
				criteriaBuilder.equal(root.get(SalaryCalculationLine_.salaryCalculation), daoParameter),
				criteriaBuilder.lessThanOrEqualTo(root.get(SalaryCalculationLine_.slxValidFrom), salaryDateParameter)));
	
		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(SalaryCalculationLine_.slxValidFrom)));
	
		final TypedQuery<SalaryCalculationLine> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(daoParameter, dao);
		query.setParameter(salaryDateParameter, salaryDate);
		return query.getResultList();
	}
}