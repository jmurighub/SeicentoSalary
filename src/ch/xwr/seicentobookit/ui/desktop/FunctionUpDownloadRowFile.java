
package ch.xwr.seicentobookit.ui.desktop;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.server.FileDownloader;
import com.vaadin.server.Resource;
import com.vaadin.server.StreamResource;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.xdev.res.ApplicationResource;
import com.xdev.ui.XdevButton;
import com.xdev.ui.XdevHorizontalLayout;
import com.xdev.ui.entitycomponent.table.XdevTable;

import ch.xwr.seicentobookit.entities.RowFile;

public class FunctionUpDownloadRowFile extends XdevHorizontalLayout {

	public static class Generator implements ColumnGenerator {
		@Override
		public Object generateCell(Table table, Object itemId, Object columnId) {

			return new FunctionUpDownloadRowFile(table, itemId, columnId);
		}
	}

	private final Table customizedTable;
	private final Object itemId;
	private final Object columnId;

	private FunctionUpDownloadRowFile(Table customizedTable, Object itemId, Object columnId) {
		super();

		this.customizedTable = customizedTable;
		this.itemId = itemId;
		this.columnId = columnId;

		this.initUI();
		
		//Downloader init
		final Resource res = getInputStream();
		final FileDownloader fd = new FileDownloader(res);
		fd.extend(this.btnDownload);
		
//		UploadReceiver rec = new UploadReceiver((Long) itemId);
//		upload.setReceiver(rec);
	}

	public Table getTable() {
		return customizedTable;
	}

	public Object getItemId() {
		return itemId;
	}

	public Object getColumnId() {
		return columnId;
	}

	@SuppressWarnings("unchecked")
	public RowFile getBean() {
		return ((XdevTable<RowFile>) getTable()).getBeanContainerDataSource().getItem(getItemId()).getBean();
	}

	/**
	 * Event handler delegate method for the {@link XdevButton} {@link #btnDownload}.
	 *
	 * @see ClickListener#buttonClick(ClickEvent)
	 * @eventHandlerDelegate
	 */
	private void btnDownload_buttonClick(ClickEvent event) {
		selectItem();
		
		//File temp = writeToTempFile(getBean());
		startDownload();		
	}
	

	private void startDownload() {

		Notification.show("Download gestartet f√ºr: " + getBean().getRimName(), Notification.Type.TRAY_NOTIFICATION);		
	}
	
	//get Stream directly from Buffer
	private Resource getInputStream() {
        StreamResource.StreamSource source = new StreamResource.StreamSource() {
            @Override
            public InputStream getStream() {
                ByteArrayInputStream inStream = new ByteArrayInputStream(getBean().getRimFile());
                return inStream;
            }
        };
		
		Resource res = new StreamResource(source, getBean().getRimName());
				
		return res;
	}

//	private File writeToTempFile(RowFile rec) {
//		File temp = null;
//		
//		FileOutputStream out = null;	
//		try {
//			temp = File.createTempFile(rec.getRimName(), ".tmp");
//			out = new FileOutputStream(temp);
//			out.write(rec.getRimFile());
//												
//		} catch (Exception e){
//			e.printStackTrace();
//		} finally {
//			if (out != null) {
//				try {
//					out.close();
//				} catch (IOException e) {
//					e.printStackTrace();
//				}
//			}
//		}
//		return temp;
//	}
	
//	   public void createExportContent()
//	   {
//	       try
//	       {
//	           final File file = File.createTempFile("export", getFileExtension());
//	           file.deleteOnExit();
//
//	           BufferedOutputStream bufferedStream = new BufferedOutputStream(new FileOutputStream(file));
//	           generateContent(bufferedStream);
//	           bufferedStream.close();
//
//	           fileDownloader.setFileDownloadResource(FileDownloadUtils.createFileResource(file));
//	        }
//	        catch (Exception e)
//	        {
//	            throw new RuntimeException("Error exporting!", e);
//	        }
//	    }
	   
	/**
	 * Event handler delegate method for the {@link XdevHorizontalLayout}.
	 *
	 * @see LayoutClickListener#layoutClick(LayoutClickEvent)
	 * @eventHandlerDelegate
	 */
	private void this_layoutClick(LayoutClickEvent event) {
		selectItem();
	}

	private void selectItem() {
		getTable().select(getItemId());
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.btnDownload = new XdevButton();
	
		this.setSpacing(false);
		this.setMargin(new MarginInfo(false));
		this.btnDownload
				.setIcon(new ApplicationResource(this.getClass(), "WebContent/WEB-INF/resources/images/Download1.png"));
		this.btnDownload.setCaption("Download");
	
		this.btnDownload.setSizeUndefined();
		this.addComponent(this.btnDownload);
		this.setComponentAlignment(this.btnDownload, Alignment.MIDDLE_CENTER);
		this.setSizeUndefined();
	
		this.addLayoutClickListener(event -> this.this_layoutClick(event));
		this.btnDownload.addClickListener(event -> this.btnDownload_buttonClick(event));
	} // </generated-code>

	// <generated-code name="variables">
	private XdevButton btnDownload; // </generated-code>


}
